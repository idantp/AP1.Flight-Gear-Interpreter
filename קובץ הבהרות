תאריך הגשה - יום רביעי, 26.12 דרך הסבמיט
הגשות באיחור - (מעודכן לבקשת הסטודנטים)
ניתן להגיש עד יום חמישי (27.12) - 5 נק'
ניתן להגיש עד יום שבת, 29.12 - 10 נק'
ניתן להגיש עד יום רביעי
סטודנטים נוצרים החוגגים את חג המולד וסטודנטים שעושים חוג דו-ראשי, יכולים להגיש ללא הפחתת נקודות עד יום חמישי 27.12 ללא הפחתת נקודות. סטודנטים אלה (ואלה בלבד) מתבקשים להגיש לתיבה מספר 99. 



"סטנדרט" ליציאה מתכנית CLI - הפקודה exit, מי שמימש עם quit מתבקש לשנות את השם, לצורך אחידות בבדיקה.

תשובות לשאלות מהפורום במודל - יש לשאול במודל בלבד 
סטודנטים שעובדים עם vm - מומלץ מאוד להריץ את הסימולטור דרך windows, על מנת שלא תיתקע לכם המכונה.
גרסת c++14 ומטה מותרות לשימוש בפרויקט
אין חסם על אורך של שורה קלט באינטרפרטר.
חובה לעבוד עם גיט - https://www.youtube.com/watch?v=SWYqp7iY_Tc
בין כל פקודות תהיה ירידת שורה (לדוגמא, לא נצהיר על שני משתנים באותה שורה)
לא יהיה מספור שורות כמו בדוגמא ב-PDF
בנוגע לרווחים בין tokens - תניחו כרגע שזה לא הכרחי, כלומר, ניתן לכתוב
var x = 2 + 3
var x=2+3
ניתן להניח שלא נצהיר על משתנה פעמיים ברצף.
לא תהיינה לולאות for 
לא נשתמש במשתנה שלא הוצהר. שימו לב, שסעיף זה וסעיף 8 יחסית קלים למימוש ועל כן המהדרים יבורכו מפי עליון.
בתוך הלולאת while יש booleanExpression, על כל המשתמע מכך. (אפשר כפל סוגריים וכו')
צריך לממש את if
אין צורך לממש אופרטור יצירת פונקציה, זה כבר יחסית מתקדם. שימו לב - מי שמימש את while כמו שצריך, יכול לממש פונקציות בפשטות. אך אין צורך
ניתן להניח שהפקודות יגיעו כפי שהן מופיעות ב-PDF, כלומר case-sensitive. 
שם הקובץ איתו אתם עובדים יינתן כפרמטר לmain, כלומר יגיע בתוך argv כפרמטר. (והוא הפרמטר היחידי שישלח)
ניתן לצפות בסרטון שהעלתי בנוגע לתקשורת בין ה-Windows לבין ה-Virtual machine שלכם.
https://drive.google.com/open?id=1Hn2pse_LFLGliL5lF6xQm9vHV6xEAYSg
אי אפשר להניח שהסימנים של פתיחת וסגירת scope מופיעים בשורה נפרדת (סוגריים מסולסלים)
שמות של משתנים - לפי הקונבנציה הרגילה. רק אותיות באנגלית, ספרות וunderscore (_). משתנה לא יכול להתחיל בספרה, ואסור לי לשים משתנה עם שם שמור (לדוגמא, var)
אין 2 פקודות בשורה
הפקודה bind אינה נרכשת, כלומר
Var x = bind “bla/blue”
Var y = x
לא אומר שבתוך y יש עכשיו bind. (דהיינו, שינוי של y לא משנה את x, ולהפך)
אבל כמובן, אפשרי לכתוב
Var y = bind x
במובן הרגיל של bind
ניתן לעבוד עם bitbucket - לא חייב עם github
אפשר להניח שהסינטקס והמשמעות של התכנית תקינים.  כמובן, מומלץ מאוד לוודא את זה, אבל (לצורך העניין)
אם תופיע שורה כגון var x = y, אז המשתנה y יהיה כבר מאותחל. באותו אופן, לא יופיעו שורות כמו var 5 = x וכו' וכו'
אין צורך לבצע חישובים על IP, כלומר כתובת IP מגיעה בפשטות (n.n.n.n). אין מצב שכתובת תגיע עם ביטוי מתמטי בתוכה. 
סטודנטים שחשים כי אינם יספיקו לסיים את התרגיל בזמן מוזמנים לשלוח טופס בקשת הארכה
https://docs.google.com/forms/d/1uQJvkDFOj0DthQPQTVO_asGFRjjwkelyucTVqMfLIwI/edit#responses
כמו שצוין, הסימולטור (בפרמטר in שלו) הוא שרת telnet. שרת telnet מקבל עוד ועוד מידע, עד שהוא נתקל בירידת שורה. לכן, כאשר אתם שולחים לשרת פקודה, עליכם לסיים אותה עם ירידת שורה ו-carriage return.
לדוגמא - כאשר יש לי buffer שאני רוצה לשלוח לשרת, אני אכתוב 
strcat(buffer, "\r\n”)
על מנת שהשרת יקרא את הפקודה שלי.
בנוגע לפקודות bind - ניתן להניח שפקודת bind תהיה תמיד בשורת הצהרה של משתנה. אין צורך לתמוך ב"משחקים" עם הפקודה.
אפשר להניח שפקודה מופיעה בשורה אחת, כלומר, לא נפצל פקודה לכמה שורות שונות. כמובן שהמהדרים יתמכו גם בזה - לא חובה. כמובן שהפקודה while, if מכילות בתוכן כמה פקודות, ולכן תהיה ירידת שורה בין האחת לשנייה.
מותר, ניתן, כדאי ורצוי לתמוך בפקודה enterc. הפקודה מחכה לקלט של אות אחת מהקונסול, ולא עושה איתו כלום. השימוש (העיקרי) בפקודה הזו יהיה על מנת שנוכל להמתין בין פתיחת התכנית שלנו לבין ההתחברות לשרת. במידה ותבחרו לממש את הפקודה הזו - תוכלו לכתוב 
openDataServer 100 100
Enterc
Connect 127.0.0.1 5000
ואנחנו לא נכניס את התו עד שהסימולטור יעבוד. כמובן, שיש דרכים רבות ושונות לממש את זה, אך זאת (לעניות דעתי) הפשוטה ביותר.
סיום תכנית עם משאבי מערכת פתוחים (mutex, socket, file, memory) - דינם כ-memory leak. אין להשאיר משאבי מערכת פתוחים.




במידה והחיבור בין הסימולטור לבין השרת לא עובד לכם, וודאו ש-
1. הסימולטור רץ עם ההגדרות הנכונות מהמודל (יש 2 הגדרות, sock out ו-sock in).
--generic=socket,out,10,127.0.0.1,5400,tcp,generic_small   
--telnet=socket,in,10,127.0.0.1,5402,tcp
2. הקובץ generic_small.xml מופיע בתיקייה protocol של הסימולטור
3. הסימולטור והשרת רצים על אותו מחשב, או לחילופין, הגדרתם את כל מה שצריך על מנת שהם יוכלו לרוץ ממחשבים שונים
4. אתם מפעילים את השרת הלוקאלי שלכם לפני שאתם מפעילים את הסימולטור


